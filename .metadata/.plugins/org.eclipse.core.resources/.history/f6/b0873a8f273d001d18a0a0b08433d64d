package br.com.sprint3.estados.config.validacao;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.fasterxml.jackson.databind.exc.InvalidFormatException;

@RestControllerAdvice
public class ErroValidacaoHandler {
	@Autowired
	private MessageSource messageSource;
	
	@ResponseStatus(code = HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public List<ErroFormDto> handle(MethodArgumentNotValidException exception) {
		List<ErroFormDto> erros = new ArrayList<>();
		List<FieldError> fieldErrors = exception.getBindingResult().getFieldErrors();
		
		
		fieldErrors.forEach(e -> {
			String mensagem = messageSource.getMessage(e, LocaleContextHolder.getLocale()) ;
			ErroFormDto erro = new ErroFormDto(e.getField(), mensagem);
			erros.add(erro);
		});
		
		return erros ;
	}
	
	@ResponseStatus(code = HttpStatus.BAD_REQUEST)
	@ExceptionHandler(InvalidFormatException.class)
	public String handle(InvalidFormatException exception) {
		List<String> erros = new ArrayList<>();
	//	List<FieldError> fieldErrors = exception.getFieldErrors();
		
		String erro = exception.getMessage();
	
			//String mensagem = getLocalizedMessage(exception, LocaleContextHolder.getLocale()) ;
			//ErroFormDto erro = new ErroFormDto(e.getField(), mensagem);
			erros.add(exception.getLocalizedMessage());
		
		
		return erro ;
	}
	
	
}
